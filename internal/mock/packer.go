// Code generated by MockGen. DO NOT EDIT.
// Source: internal/packer/packer.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSizer is a mock of Sizer interface.
type MockSizer struct {
	ctrl     *gomock.Controller
	recorder *MockSizerMockRecorder
}

// MockSizerMockRecorder is the mock recorder for MockSizer.
type MockSizerMockRecorder struct {
	mock *MockSizer
}

// NewMockSizer creates a new mock instance.
func NewMockSizer(ctrl *gomock.Controller) *MockSizer {
	mock := &MockSizer{ctrl: ctrl}
	mock.recorder = &MockSizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSizer) EXPECT() *MockSizerMockRecorder {
	return m.recorder
}

// AddSize mocks base method.
func (m *MockSizer) AddSize(ctx context.Context, sizeToAdd int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSize", ctx, sizeToAdd)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSize indicates an expected call of AddSize.
func (mr *MockSizerMockRecorder) AddSize(ctx, sizeToAdd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSize", reflect.TypeOf((*MockSizer)(nil).AddSize), ctx, sizeToAdd)
}

// DeleteSize mocks base method.
func (m *MockSizer) DeleteSize(ctx context.Context, sizeToDelete int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSize", ctx, sizeToDelete)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSize indicates an expected call of DeleteSize.
func (mr *MockSizerMockRecorder) DeleteSize(ctx, sizeToDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSize", reflect.TypeOf((*MockSizer)(nil).DeleteSize), ctx, sizeToDelete)
}

// Exists mocks base method.
func (m *MockSizer) Exists(sizeToCheckFor int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", sizeToCheckFor)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockSizerMockRecorder) Exists(sizeToCheckFor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSizer)(nil).Exists), sizeToCheckFor)
}

// ListSizes mocks base method.
func (m *MockSizer) ListSizes() []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSizes")
	ret0, _ := ret[0].([]int)
	return ret0
}

// ListSizes indicates an expected call of ListSizes.
func (mr *MockSizerMockRecorder) ListSizes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSizes", reflect.TypeOf((*MockSizer)(nil).ListSizes))
}

// PutSizes mocks base method.
func (m *MockSizer) PutSizes(ctx context.Context, sizesToPut []int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSizes", ctx, sizesToPut)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSizes indicates an expected call of PutSizes.
func (mr *MockSizerMockRecorder) PutSizes(ctx, sizesToPut interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSizes", reflect.TypeOf((*MockSizer)(nil).PutSizes), ctx, sizesToPut)
}

// MockPacker is a mock of Packer interface.
type MockPacker struct {
	ctrl     *gomock.Controller
	recorder *MockPackerMockRecorder
}

// MockPackerMockRecorder is the mock recorder for MockPacker.
type MockPackerMockRecorder struct {
	mock *MockPacker
}

// NewMockPacker creates a new mock instance.
func NewMockPacker(ctrl *gomock.Controller) *MockPacker {
	mock := &MockPacker{ctrl: ctrl}
	mock.recorder = &MockPackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacker) EXPECT() *MockPackerMockRecorder {
	return m.recorder
}

// GetPackets mocks base method.
func (m *MockPacker) GetPackets(ctx context.Context, itemsToPack int) (map[int]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackets", ctx, itemsToPack)
	ret0, _ := ret[0].(map[int]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackets indicates an expected call of GetPackets.
func (mr *MockPackerMockRecorder) GetPackets(ctx, itemsToPack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackets", reflect.TypeOf((*MockPacker)(nil).GetPackets), ctx, itemsToPack)
}
